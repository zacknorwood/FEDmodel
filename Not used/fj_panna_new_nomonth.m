function [y1] = fj_panna_new_nomonth(x1)
%FJ_PANNA_NEW_NOMONTH neural network simulation function.
%
% Auto-generated by MATLAB, 20-Sep-2019 16:38:43.
% 
% [y1] = fj_panna_new_nomonth(x1) takes these arguments:
%   x = 3xQ matrix, input #1
%   Row 1: Outdoor temperature in Celsius
%   Row 2: Workday or non-workday [1 = workday, 0 = non-workday] 
%   Row 3: Time of day [1-24, with 24 = 00 is treated as the start of the
%          year, i.e., the first hour of the year has value 24. This since
%          the logged value for that time is primarly between 23 -24 the
%          day before]
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-11.5;0;1];
x1_step1.gain = [0.08;2;0.0869565217391304];
x1_step1.ymin = -1;

% Layer 1
b1 = [16.903151983380105605;12.965146907404282217;-2.5881669357148240351;-4.8607013787772288538;7.2730781894673217636;8.0325471994561183919;0.029873673541475187498;2.2674173149364600377;-1.4512403349298363953;1.3915865076923499277];
IW1_1 = [0.19108749716920450656 -9.1744297629040190145 18.824610107932802094;2.4879995162717292168 -9.1908092751383563268 -12.849731381385199214;-3.3821079923960657432 5.67510244144578202 -0.93129523970670058386;21.610411466425350824 2.3897446377064128775 3.6732547641023018947;-14.452229650107934589 4.1226369776823572622 3.1142660617502055942;36.484970285811051838 8.6938776901638270544 -0.56341037063116117256;0.69373499254315451612 1.8355285075285214802 4.086705523084962266;11.851905871846755147 -2.8686650415014192106 -1.9569600142534342435;-2.2010088866863988244 0.084684555846003373158 -1.4506967524713465512;2.107522661578875578 -0.088664559379505791803 1.4067233418387536936];

% Layer 2
b2 = -0.16474041067023481588;
LW2_1 = [0.099385081763291624468 0.085927267165051529618 0.10642217583054502938 -0.069458191150302842076 0.085150883240191627133 -0.084935528858260708751 -0.040034185659344100061 -0.081930334655456946158 2.9489753040794561834 2.9663984352643146813];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.454545454545455;
y1_step1.xoffset = 2.6;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
